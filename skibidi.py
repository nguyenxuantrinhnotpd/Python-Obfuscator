#!/usr/bin/env python3
"""
Python Code Obfuscator - Chuy·ªÉn ƒë·ªïi code Python th√†nh d·∫°ng state machine

C√¥ng c·ª• n√†y s·∫Ω bi·∫øn ƒë·ªïi code Python th√†nh m·ªôt d·∫°ng kh√≥ ƒë·ªçc b·∫±ng c√°ch:
- S·ª≠ d·ª•ng k√Ω t·ª± H√†n Qu·ªëc l√†m t√™n bi·∫øn
- Chuy·ªÉn ƒë·ªïi lu·ªìng th·ª±c thi th√†nh state machine v·ªõi while loop
- X√°o tr·ªôn th·ª© t·ª± c√°c case ƒë·ªÉ l√†m kh√≥ hi·ªÉu logic

Author: NGUYEN XUAN TRINH
"""

import ast
import random
import argparse
import sys
import os
from pathlib import Path


class PythonObfuscator:
    """L·ªõp ch√≠nh ƒë·ªÉ obfuscate Python code"""
    
    def __init__(self, use_korean_chars=True, random_seed=None):
        """
        Kh·ªüi t·∫°o obfuscator
        
        Args:
            use_korean_chars (bool): S·ª≠ d·ª•ng k√Ω t·ª± H√†n Qu·ªëc cho t√™n bi·∫øn
            random_seed (int): Seed cho random generator (ƒë·ªÉ c√≥ k·∫øt qu·∫£ nh·∫•t qu√°n)
        """
        self.use_korean_chars = use_korean_chars
        if random_seed is not None:
            random.seed(random_seed)
    
    def generate_variable_name(self, length=20):
        """T·∫°o t√™n bi·∫øn ng·∫´u nhi√™n"""
        if self.use_korean_chars:
            chars = [chr(random.randint(44032, 55203)) for _ in range(length)]
            return ''.join(chars)
        else:
            # S·ª≠ d·ª•ng k√Ω t·ª± Latin n·∫øu kh√¥ng mu·ªën d√πng H√†n Qu·ªëc
            chars = [chr(random.randint(97, 122)) for _ in range(length)]
            return 'var_' + ''.join(chars)
    
    def obfuscate(self, source_code: str) -> str:
        """
        Obfuscate Python code
        
        Args:
            source_code (str): M√£ ngu·ªìn Python c·∫ßn obfuscate
            
        Returns:
            str: M√£ ƒë√£ ƒë∆∞·ª£c obfuscate
        """
        try:
            tree = ast.parse(source_code)
        except SyntaxError as e:
            raise ValueError(f"L·ªói c√∫ ph√°p trong m√£ ngu·ªìn: {e}")
        
        stmts = tree.body
        pc_var = self.generate_variable_name()
        
        if not stmts:
            return f'{pc_var} = 0\n# Kh√¥ng c√≥ c√¢u l·ªánh n√†o ƒë·ªÉ obfuscate'
        
        n = len(stmts)
        random_offset = random.randint(1, 1000000000000)
        labels = list(range(random_offset, random_offset + n))
        end_label = random_offset + n
        
        match_cases = []
        
        for i, (lbl, node) in enumerate(zip(labels, stmts)):
            next_pc = end_label if i == n - 1 else labels[i + 1]
            case_body = []
            
            if isinstance(node, ast.stmt):
                case_body.append(node)
            else:
                case_body.extend(node)
            
            pc_assign = ast.Assign(
                targets=[ast.Name(id=pc_var, ctx=ast.Store())], 
                value=ast.Constant(value=next_pc)
            )
            case_body.append(pc_assign)
            
            match_case = ast.match_case(
                pattern=ast.MatchValue(value=ast.Constant(value=lbl)), 
                guard=None, 
                body=case_body
            )
            match_cases.append(match_case)
        
        # X√°o tr·ªôn th·ª© t·ª± c√°c case
        random.shuffle(match_cases)
        
        # Th√™m case k·∫øt th√∫c
        match_cases.append(ast.match_case(
            pattern=ast.MatchValue(value=ast.Constant(value=end_label)), 
            guard=None, 
            body=[ast.Break()]
        ))
        
        # Th√™m case m·∫∑c ƒë·ªãnh
        match_cases.append(ast.match_case(
            pattern=ast.MatchAs(), 
            guard=None, 
            body=[ast.Break()]
        ))
        
        # T·∫°o match statement
        match_stmt = ast.Match(
            subject=ast.Name(id=pc_var, ctx=ast.Load()), 
            cases=match_cases
        )
        
        # T·∫°o while loop
        while_loop = ast.While(
            test=ast.Constant(value=True), 
            body=[match_stmt], 
            orelse=[]
        )
        
        # Kh·ªüi t·∫°o PC
        init_pc = ast.Assign(
            targets=[ast.Name(id=pc_var, ctx=ast.Store())], 
            value=ast.Constant(value=labels[0] if labels else 0)
        )
        
        # T·∫°o module m·ªõi
        module = ast.Module(body=[init_pc, while_loop], type_ignores=[])
        ast.fix_missing_locations(module)
        
        return ast.unparse(module)


def main():
    """H√†m main ƒë·ªÉ ch·∫°y t·ª´ command line"""
    parser = argparse.ArgumentParser(
        description="Python Code Obfuscator - Obfuscate m√£ Python b·∫±ng state machine",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª• s·ª≠ d·ª•ng:
  python skibidi.py input.py                    # Obfuscate v√† in ra m√†n h√¨nh
  python skibidi.py input.py -o output.py      # Obfuscate v√† l∆∞u v√†o file
  python skibidi.py input.py -r                # Ch·∫°y code ƒë√£ obfuscate
  python skibidi.py input.py --no-korean       # Kh√¥ng s·ª≠ d·ª•ng k√Ω t·ª± H√†n Qu·ªëc
  python skibidi.py input.py --seed 123        # S·ª≠ d·ª•ng seed c·ªë ƒë·ªãnh
        """
    )
    
    parser.add_argument(
        'input_file', 
        help='File Python c·∫ßn obfuscate'
    )
    
    parser.add_argument(
        '-o', '--output', 
        help='File ƒë·∫ßu ra (m·∫∑c ƒë·ªãnh: in ra m√†n h√¨nh)'
    )
    
    parser.add_argument(
        '-r', '--run', 
        action='store_true',
        help='Ch·∫°y code ƒë√£ obfuscate sau khi t·∫°o'
    )
    
    parser.add_argument(
        '--no-korean', 
        action='store_true',
        help='Kh√¥ng s·ª≠ d·ª•ng k√Ω t·ª± H√†n Qu·ªëc cho t√™n bi·∫øn'
    )
    
    parser.add_argument(
        '--seed', 
        type=int,
        help='Seed cho random generator (ƒë·ªÉ c√≥ k·∫øt qu·∫£ nh·∫•t qu√°n)'
    )
    
    parser.add_argument(
        '-v', '--verbose', 
        action='store_true',
        help='In th√¥ng tin chi ti·∫øt'
    )
    
    args = parser.parse_args()
    
    # Ki·ªÉm tra file input
    if not os.path.exists(args.input_file):
        print(f"‚ùå L·ªói: File '{args.input_file}' kh√¥ng t·ªìn t·∫°i!", file=sys.stderr)
        sys.exit(1)
    
    try:
        # ƒê·ªçc file input
        if args.verbose:
            print(f"üìñ ƒêang ƒë·ªçc file: {args.input_file}")
        
        with open(args.input_file, 'r', encoding='utf-8') as f:
            source_code = f.read()
        
        # T·∫°o obfuscator
        obfuscator = PythonObfuscator(
            use_korean_chars=not args.no_korean,
            random_seed=args.seed
        )
        
        # Obfuscate code
        if args.verbose:
            print("üîÑ ƒêang obfuscate code...")
        
        obfuscated_code = obfuscator.obfuscate(source_code)
        
        # Xu·∫•t k·∫øt qu·∫£
        if args.output:
            if args.verbose:
                print(f"üíæ ƒêang l∆∞u v√†o file: {args.output}")
            
            with open(args.output, 'w', encoding='utf-8') as f:
                f.write(obfuscated_code)
            
            print(f"‚úÖ ƒê√£ obfuscate th√†nh c√¥ng! K·∫øt qu·∫£ l∆∞u t·∫°i: {args.output}")
        else:
            print("=" * 60)
            print("OBFUSCATED CODE:")
            print("=" * 60)
            print(obfuscated_code)
            print("=" * 60)
        
        # Ch·∫°y code n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if args.run:
            if args.verbose:
                print("üöÄ ƒêang ch·∫°y code ƒë√£ obfuscate...")
            print("\n" + "=" * 40)
            print("OUTPUT:")
            print("=" * 40)
            exec(obfuscated_code)
            
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng th·ªÉ ƒë·ªçc file '{args.input_file}'!", file=sys.stderr)
        sys.exit(1)
    except ValueError as e:
        print(f"‚ùå L·ªói: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':

    main()
